let inputField = document.getElementById('cipher-input'); //–ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç
let outputField = document.getElementById('cipher-output'); //–≤—ã–≤–æ–¥–∏–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
const vowelFirst = new RegExp('^[–∞–µ—ë–∏–æ—É—ã—ç—é—è]+[^:,?!_()]+$', 'i'); //—Ä–µ–≥—ç–∫—Å–ø –¥–ª—è —Å–ª–æ–≤ –Ω–∞ –≥–ª–∞—Å–Ω—ã–µ (–Ω–æ –±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤)
const consonantFirst = new RegExp('^[–±–≤–≥–¥–∂–∑–π–∫–ª–º–Ω–ø—Ä—Å—Ç—Ñ—Ö—Ü—á—à—â]+[^:,?!_()]+$', 'i'); //—Ä–µ–≥—ç–∫—Å–ø –¥–ª—è —Å–ª–æ–≤ –Ω–∞ —Å–æ–≥–ª–∞—Å–Ω—ã–µ (—Ç–∞–∫–∂–µ –±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤)
const exVowel = new RegExp('(—É—ç–∫—ç)$', ''); //—Ä–µ–≥—ç–∫—Å–ø –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–ª–∞—Å–Ω—ã—Ö
const exConsonant = new RegExp('^(–∞—ç–∫—ç)', ''); //—Ä–µ–≥—ç–∫—Å–ø –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω—ã—Ö
const cipherAttribute = new RegExp('üê∏+', 'g'); //—Ä–µ–≥—ç–∫—Å–ø –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞

inputField.addEventListener('keyup', function() { //–ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–æ–π —Ç–µ–∫—Å—Ç –ø–æ–ª—É—á–∏–ª–∏ –∏ –ª–∏–±–æ —à–∏—Ñ—Ä—É–µ–º, –ª–∏–±–æ –¥–µ—à–∏—Ñ—Ä—É–µ–º
  if (!cipherAttribute.test(inputField.value)) {
    outputField.innerText = makejabaCipher(inputField.value);
  } else {
    outputField.innerText = decipherer(inputField.value);
  }
});

function makejabaCipher(str) {
  let wordByWordStr = str.split(/\s/); //—Ä–∞–∑–±–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–æ–≤–Ω–æ

  for (let i = 0; i < wordByWordStr.length; i++) {
    if (vowelFirst.test(wordByWordStr[i])) { //–¥–æ–±–∞–≤–ª—è–µ—Ç –æ–∫–æ–Ω—á–∞–Ω–∏–µ –≥–ª–∞—Å–Ω—ã–º
      wordByWordStr[i] = wordByWordStr[i] + '—É—ç–∫—ç';
    } else if (consonantFirst.test(wordByWordStr[i])) { //–¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞—á–∞–ª–æ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω—ã–º –∏ –ø–µ—Ä–µ—Å—Ç–∞–≤–ª—è–µ—Ç –±—É–∫–≤—É
        let LastletterOfWord = wordByWordStr[i].match(/^[–±–≤–≥–¥–∂–∑–π–∫–ª–º–Ω–ø—Ä—Å—Ç—Ñ—Ö—Ü—á—à—â]{1}/i);
        wordByWordStr[i] = wordByWordStr[i].replace(/^[–±–≤–≥–¥–∂–∑–π–∫–ª–º–Ω–ø—Ä—Å—Ç—Ñ—Ö—Ü—á—à—â]{1}/i, '–∞—ç–∫—ç') + LastletterOfWord + '—Ä—ç–∫—ç'; //confusing words with consonants
    }
  }

  let randomNum = Math.floor(Math.random() * (wordByWordStr.length - 1) + 1);

  for (let j = 0; j < randomNum; j++) { //—Å—Ç–∞–≤–∏—Ç —ç–º–æ–¥–∑–∏ –∂–∞–± –≤ —Ä–∞–Ω–¥–æ–º–Ω—ã–µ –º–µ—Å—Ç–∞
    let randomJabsNumber = Math.floor(Math.random() * (wordByWordStr.length));
    wordByWordStr[randomJabsNumber] = wordByWordStr[randomJabsNumber] + ' üê∏';
  }

  return wordByWordStr.join(' '); //return JabaCipher
};

function decipherer(str) {
  let wordByWordStr = str.split(/\s/).filter(item => item !== 'üê∏'); //—Ä–∞–∑–±–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–æ–≤–Ω–æ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –æ—Ç —ç–º–æ–¥–∑–∏
  let decipheredStr = [];

  for (let word of wordByWordStr) {
    switch(true) {
      case exVowel.test(word): //–¥–µ—à–∏—Ñ—Ä—É–µ—Ç –±—ã–≤—à–∏–µ —Å–ª–æ–≤–∞ –Ω–∞ –≥–ª–∞—Å–Ω—ã–µ
        decipheredStr.push(word.replace(/—É—ç–∫—ç$/, ''));
        break;
      case exConsonant.test(word): //–¥–µ—à–∏—Ñ—Ä—É–µ—Ç –±—ã–≤—à–∏–µ —Å–ª–æ–≤–∞ –Ω–∞ —Å–æ–≥–ª–∞—Å–Ω—ã–µ
        let newWord = word.replace(/^–∞—ç–∫—ç/, '').replace(/—Ä—ç–∫—ç$/, '');
        let LastletterOfDeciphererWord= newWord.match(/[–±–≤–≥–¥–∂–∑–π–∫–ª–º–Ω–ø—Ä—Å—Ç—Ñ—Ö—Ü—á—à—â]{1}$/i);
        decipheredStr.push(LastletterOfDeciphererWord + newWord.replace(/[–±–≤–≥–¥–∂–∑–π–∫–ª–º–Ω–ø—Ä—Å—Ç—Ñ—Ö—Ü—á—à—â]{1}$/i, ''));
        break;
      default: //–Ω–µ —Ç—Ä–æ–≥–∞–µ—Ç —Å–ª–æ–≤–∞ —Å–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏ –∏ —Å–æ—é–∑—ã
        decipheredStr.push(word);
    }
  }

  return decipheredStr.join(' ');
};
